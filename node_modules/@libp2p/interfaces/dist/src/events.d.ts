export interface EventCallback<EventType> {
    (evt: EventType): void;
}
export declare type EventHandler<EventType> = EventCallback<EventType> | ({
    handleEvent: EventCallback<EventType>;
}) | null;
/**
 * Adds types to the EventTarget class. Hopefully this won't be necessary forever.
 *
 * https://github.com/microsoft/TypeScript/issues/28357
 * https://github.com/microsoft/TypeScript/issues/43477
 * https://github.com/microsoft/TypeScript/issues/299
 * etc
 */
export declare class EventEmitter<EventMap> extends EventTarget {
    #private;
    listenerCount(type: string): number;
    addEventListener<U extends keyof EventMap>(type: U, callback: EventHandler<EventMap[U]>, options?: AddEventListenerOptions | boolean): void;
    removeEventListener<U extends keyof EventMap>(type: U, callback?: EventHandler<EventMap[U]> | undefined, options?: EventListenerOptions | boolean): void;
    dispatchEvent(event: Event): boolean;
}
export declare const CustomEvent: {
    new <T>(type: string, eventInitDict?: CustomEventInit<T> | undefined): CustomEvent<T>;
    prototype: CustomEvent<any>;
};
//# sourceMappingURL=events.d.ts.map